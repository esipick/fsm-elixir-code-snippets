<div class="panel-header panel-header-sm">
  <div class="header text-center"></div>
</div>

<div class="content">

<div class="row">
  <div class="col-md-12">
    <div class="panel">
        <div class="header">
            <div class="menu-icon">
            </div><span class="title">Notifications</span>
        </div>        
        <div class="notifications clearfix">
            <div class="d-flex justify-content-between noti-filter">
                <ul class="nav nav-pills nav-pills-primary" role="tablist">
                    <li class="nav-item" style="margin-right:2rem;">
                      <button class="btn btn-primary" id="read" onclick="getAllNotifications()" role="tablist" aria-expanded="false">
                          All
                      </button>
                    </li>
                    <li class="nav-item" style="margin-right:20rem;">
                      <button class="btn btn-default" id="unread" onclick="getUnreadNotifications()" role="tablist" aria-expanded="true">
                          Unread
                      </button>
                    </li>
                    <li class="nav-item" style="margin-right:2rem;">
                      <button class="btn btn-default" id="read" onclick="markNotificationsRead()" role="tablist" aria-expanded="false">
                          Mark As Read
                      </button>
                    </li>
                </ul>
            </div>
          
            <div id="noti-list">
            </div>     
            <div class="d-flex justify-content-end">
                <ul class="nav nav-pills nav-pills-primary" role="tablist">
                    <li class="nav-item">
                      <button class="btn btn-default" onclick="getPrevNotifications()" role="tablist" aria-expanded="false">
                          Prev
                      </button>
                    </li>

                    <li class="nav-item">
                      <button class="btn btn-default" onclick="getNextNotifications()" role="tablist" aria-expanded="true">
                          Next
                      </button>
                    </li>
                </ul>
            </div>       
        </div>
    </div>   
  </div>
</div>
<nav id="context-menu" class="context-menu">
  <ul class="context-menu__items">
    <li class="context-menu__item">
      <a href="#" class="context-menu__link" data-action="Read"><i class="fa fa-eye"></i> Mark as Read</a>
    </li>
    <li class="context-menu__item">
      <a href="#" class="context-menu__link" data-action="Unread"><i class="fa fa-eye-slash"></i> Mark as Unread</a>
    </li>
  </ul>
</nav>
<style>
.panel {
  background: #fff;
  border-radius: 3px;
  overflow: hidden;
  -webkit-box-shadow: 10px 10px 15px 0 rgba(0, 0, 0, 0.3);
          box-shadow: 10px 10px 15px 0 rgba(0, 0, 0, 0.3);
  -webkit-transition: all .5s ease-in-out;
  transition: all .5s ease-in-out;
}
.panel .header {
  height: 60px;
  width: 100%;
  background: #1B95E0;
}
.panel .header .menu-icon {
  position: absolute;
  width: 29px;
  height: 15px;
  top: 23px;
  left: 20px;
}
.panel .header .menu-icon:hover .dash-top, .panel .header .menu-icon:hover .dash-bottom,
.panel .header .menu-icon:hover .dash-bottom,
.panel .header .menu-icon:hover .circle {
  background: #fff;
}
.panel .header .menu-icon .dash-top, .panel .header .menu-icon .dash-bottom {
  position: absolute;
  width: 20px;
  height: 3px;
  top: 0;
  left: 0;
  background: #B2DAFF;
  border-radius: 3px;
  -webkit-transition: all .2s ease-in-out;
  transition: all .2s ease-in-out;
}
.panel .header .menu-icon .dash-bottom {
  width: 29px;
  top: auto;
  bottom: 0;
}
.panel .header .menu-icon .circle {
  position: absolute;
  height: 7px;
  width: 7px;
  border-radius: 4px;
  top: -2px;
  right: 0;
  background: #B2DAFF;
  -webkit-transition: all .2s ease-in-out;
  transition: all .2s ease-in-out;
}
.panel .header .title {
  display: block;
  text-align: center;
  line-height: 60px;
  color: #fff;
  font-weight: 600;
  font-size: 15px;
}
.panel .noti-filter {
   margin: 0px 0px 40px 20px;
}
.panel .notifications {
  position: relative;
  height: 100%;
  overflow: hidden;
}
.panel .notifications .line {
  position: absolute;
  top: 0;
  left: 27px;
  bottom: 0;
  width: 3px;
  background: #EBEBEB;
}
.panel .notifications .select-all {
  margin: 25px 20px 25px 43px;
}
.panel .notifications .notification {
  display: flex;
  position: relative;
  z-index: 2;
  margin: 25px 20px 25px 43px;
}
.panel .notifications .notification:nth-child(2) {
  -webkit-animation: here-am-i 0.5s ease-out 0.4s;
          animation: here-am-i 0.5s ease-out 0.4s;
  -webkit-animation-fill-mode: both;
          animation-fill-mode: both;
}
.panel .notifications .notification:nth-child(3) {
  -webkit-animation: here-am-i 0.5s ease-out 0.6s;
          animation: here-am-i 0.5s ease-out 0.6s;
  -webkit-animation-fill-mode: both;
          animation-fill-mode: both;
}
.panel .notifications .notification:nth-child(4) {
  -webkit-animation: here-am-i 0.5s ease-out 0.8s;
          animation: here-am-i 0.5s ease-out 0.8s;
  -webkit-animation-fill-mode: both;
          animation-fill-mode: both;
}
.panel .notifications .notification:hover {
  color: #1B95E0;
  cursor: pointer;
}
.panel .notifications .notification .circle {
  -webkit-box-sizing: border-box;
          box-sizing: border-box;
  position: absolute;
  height: 11px;
  width: 11px;
  background: #fff;
  border: 2px solid #1B95E0;
  -webkit-box-shadow: 0 0 0 3px #fff;
          box-shadow: 0 0 0 3px #fff;
  border-radius: 6px;
  top: 0;
  left: -20px;
}

.panel .notifications .notification .circle.active {
  background: #1B95E0;
}

.panel .notifications .notification .time {
  display: block;
  font-size: 11px;
  line-height: 11px;
  margin-bottom: 2px;
}
.panel .notifications .notification .text-box {
  margin-left:0.5rem;
}
.panel .notifications .notification p {
  font-size: 15px;
  line-height: 20px;
  margin: 0;
}
.panel .notifications .notification p b {
  font-weight: 600;
}
@-webkit-keyframes here-am-i {
  from {
    -webkit-transform: translate3d(0, 50px, 0);
            transform: translate3d(0, 50px, 0);
    opacity: 0;
  }
  to {
    -webkit-transform: translate3d(0, 0, 0);
            transform: translate3d(0, 0, 0);
    opacity: 1;
  }
}

@keyframes here-am-i {
  from {
    -webkit-transform: translate3d(0, 50px, 0);
            transform: translate3d(0, 50px, 0);
    opacity: 0;
  }
  to {
    -webkit-transform: translate3d(0, 0, 0);
            transform: translate3d(0, 0, 0);
    opacity: 1;
  }
}


.container {
  margin: 0 auto;
  padding: 0 24px;
  max-width: 960px;
}

/* primary header */

.primary-header {
  padding: 24px 0;
  text-align: center;
  border-bottom: solid 2px #cfcfcf;
}

.primary-header__title {
  color: #393939;
  font-size: 36px;
}

.primary-header__title small {
  font-size: 18px;
  color: #898989;
}

/* content */

.content {
  padding: 48px 0;
  border-bottom: solid 2px #cfcfcf;
}

.content__footer {
  margin-top: 12px;
  text-align: center;
}

/* footer */

.primary-footer {
  padding: 24px 0;
  color: #898989;
  font-size: 14px;
  text-align: center;
}

/* tasks */

.tasks {
  list-style: none;
  margin: 0;
  padding: 0;
}

.task {
  display: flex;
  justify-content: space-between;
  padding: 12px 0;
  border-bottom: solid 1px #dfdfdf;
}

.task:last-child {
  border-bottom: none;
}

/* context menu */

.context-menu {
  display: none;
  position: absolute;
  z-index: 10;
  padding: 12px 0;
  width: 240px;
  background-color: #fff;
  border: solid 1px #dfdfdf;
  box-shadow: 1px 1px 2px #cfcfcf;
}

.context-menu--active {
  display: block;
}

.context-menu__items {
  list-style: none;
  margin: 0;
  padding: 0;
}

.context-menu__item {
  display: block;
  margin-bottom: 4px;
}

.context-menu__item:last-child {
  margin-bottom: 0;
}

.context-menu__link {
  display: block;
  padding: 4px 12px;
  color: #0066aa;
  text-decoration: none;
}

.context-menu__link:hover {
  color: #fff;
  background-color: #0066aa;
}

</style>
<script>
  function markNotificationAPI(query, type) {
    $.ajax({
      method: "post",
      url: "/api/graphiql/",
      headers: AUTH_HEADERS_BEARER,
      data: {
          query: query,
          variable: null
      }
      }).then(function (response) {
          if ( !response.errors ) {
              showAlert(`Notification/s marked ${type} successfully.`, 'success')
              if ( notiType == 'all' ) {
                getAllNotifications();
                return;
              }
              getUnreadNotifications();
          }
      }).catch(function (e) {
          console.log(`Error  in marking notifications as ${type}.`, e);
      })
  }
</script>
<script>
  (function() {
  
  "use strict";

  /**
   * Function to check if we clicked inside an element with a particular class
   * name.
   * 
   * @param {Object} e The event
   * @param {String} className The class name to check against
   * @return {Boolean}
   */
  function clickInsideElement( e, className ) {
    var el = e.srcElement || e.target;
    
    if ( el.classList.contains(className) ) {
      return el;
    } else {
      while ( el = el.parentNode ) {
        if ( el.classList && el.classList.contains(className) ) {
          return el;
        }
      }
    }

    return false;
  }

  /**
   * Get's exact position of event.
   * 
   * @param {Object} e The event passed in
   * @return {Object} Returns the x and y position
   */
  function getPosition(e) {
    var posx = 0;
    var posy = 0;

    if (!e) var e = window.event;
    
    if (e.pageX || e.pageY) {
      posx = e.pageX;
      posy = e.pageY;
    } else if (e.clientX || e.clientY) {
      posx = e.clientX + document.body.scrollLeft + document.documentElement.scrollLeft;
      posy = e.clientY + document.body.scrollTop + document.documentElement.scrollTop;
    }

    return {
      x: posx,
      y: posy
    }
  }
  
  /**
   * Variables.
   */
  var contextMenuClassName = "context-menu";
  var contextMenuItemClassName = "context-menu__item";
  var contextMenuLinkClassName = "context-menu__link";
  var contextMenuActive = "context-menu--active";

  var taskItemClassName = "notification";
  var taskItemInContext;

  var clickCoords;
  var clickCoordsX;
  var clickCoordsY;

  var menu = document.querySelector("#context-menu");
  var menuItems = menu.querySelectorAll(".context-menu__item");
  var menuState = 0;
  var menuWidth;
  var menuHeight;
  var menuPosition;
  var menuPositionX;
  var menuPositionY;

  var windowWidth;
  var windowHeight;

  /**
   * Initialise context menu code.
   */
  function init() {
    contextListener();
    clickListener();
    keyupListener();
    resizeListener();
  }

  /**
   * Listens for contextmenu events.
   */
  function contextListener() {
    document.addEventListener( "contextmenu", function(e) {
      taskItemInContext = clickInsideElement( e, taskItemClassName );

      if ( taskItemInContext ) {
        e.preventDefault();
        toggleMenuOn();
        positionMenu(e);
      } else {
        taskItemInContext = null;
        toggleMenuOff();
      }
    });
  }

  /**
   * Listens for click events.
   */
  function clickListener() {
    document.addEventListener( "click", function(e) {
      var clickeElIsLink = clickInsideElement( e, contextMenuLinkClassName );

      if ( clickeElIsLink ) {
        e.preventDefault();
        menuItemListener( clickeElIsLink );
      } else {
        var button = e.which || e.button;
        if ( button === 1 ) {
          toggleMenuOff();
        }
      }
    });
  }

  /**
   * Listens for keyup events.
   */
  function keyupListener() {
    window.onkeyup = function(e) {
      if ( e.keyCode === 27 ) {
        toggleMenuOff();
      }
    }
  }

  /**
   * Window resize event listener
   */
  function resizeListener() {
    window.onresize = function(e) {
      toggleMenuOff();
    };
  }

  /**
   * Turns the custom context menu on.
   */
  function toggleMenuOn() {
    if ( menuState !== 1 ) {
      menuState = 1;
      menu.classList.add( contextMenuActive );
    }
  }

  /**
   * Turns the custom context menu off.
   */
  function toggleMenuOff() {
    if ( menuState !== 0 ) {
      menuState = 0;
      menu.classList.remove( contextMenuActive );
    }
  }

  /**
   * Positions the menu properly.
   * 
   * @param {Object} e The event
   */
  function positionMenu(e) {
    clickCoords = getPosition(e);
    clickCoordsX = clickCoords.x;
    clickCoordsY = clickCoords.y;

    menuWidth = menu.offsetWidth + 4;
    menuHeight = menu.offsetHeight + 4;

    windowWidth = window.innerWidth;
    windowHeight = window.innerHeight;

    if ( (windowWidth - clickCoordsX) < menuWidth ) {
      menu.style.left = windowWidth - menuWidth + "px";
    } else {
      menu.style.left = clickCoordsX + "px";
    }

    if ( (windowHeight - clickCoordsY) < menuHeight ) {
      menu.style.top = windowHeight - menuHeight + "px";
    } else {
      menu.style.top = clickCoordsY + "px";
    }
  }

  /**
   * action function that logs an action when a menu item link is clicked
   * 
   * @param {HTMLElement} link The link that was clicked
   */
  function menuItemListener( link ) {
    const noti_ids = '[' + taskItemInContext.getAttribute("data-id") + ']';
    let isRead = true;
    if ( link.getAttribute("data-action") === 'Unread' ) {
      isRead = false;
    }
    const query = ` mutation {
      markNotificationAlerts(alertIds: ${noti_ids}, isRead: ${isRead})
    }`;
    toggleMenuOff();
    markNotificationAPI(query, link.getAttribute("data-action"));
  }

  /**
   * Run the app.
   */
  init();

})();
</script>
<script>
    var AUTH_HEADERS_BEARER = {"authorization": 'Bearer ' + window.fsm_token}
    const perPage = 10;
    let page = 1;
    let notiType =  'all';
    let noNext = false;
    function showAlert(message, type) {
      $.notify({
        message: message
      }, {
        type: type,
        placement: { align: "center" }
      })
    }
    function getUnreadNotifications(pageNumber) {
         
        if ( !pageNumber ) {
          noNext = false;
          pageNumber = page;
        }
        notiType = 'unread';
        $('#read').removeClass('btn-primary');
        $('#read').addClass('btn-default');
        $('#unread').removeClass('btn-default');
        $('#unread').addClass('btn-primary');
        const query = `
            query {
                listNotificationAlerts(page:${pageNumber}, perPage:${perPage},
                    filter:{
                        isRead: false
                    },
                    sortField: UPDATED_AT, sortOrder: DESC
                ){
                    page
                    alerts {
                        id
                        title
                        description
                        isRead
                        createdAt
                    }
                }
            }`;
        $.ajax({
        method: "post",
        url: "/api/graphiql/",
        headers: AUTH_HEADERS_BEARER,
        data: {
            query: query,
            variable: null
        }
        }).then(function (response) {
            if ( !response.errors ) {
                let notiList = '';
                const alerts = response.data.listNotificationAlerts.alerts;
                alerts.forEach(noti => {
                    notiList += `
                        <div class="notification" data-id="${noti.id}">
                            <div class="circle active"></div> 
                            <input type="checkbox" name="mark-noti" value="${noti.id}"/>                        
                            <div class="text-box">
                              <span class="time">${noti.title}</span>
                              <p>${noti.description}</p>
                            </div>
                        </div>
                    `;
                }) 
                if ( notiList !== '' ) {
                  notiList = `
                    <div class="select-all">                      
                      <input id="select-all" type="checkbox" onclick="checkAll()" />
                      <label>Select All</label>
                    </div>
                  ` + notiList;
                }
                else {
                  notiList = '<p style="margin-left:25px;">No notifications.</p>';
                }
                $('#noti-list').html(notiList);
                if ( alerts.length < perPage ) {
                  noNext = true;
                }
            }
        }).catch(function (e) {
            console.log('Error  in retrieving notifications.', e);
        })
    }
    function getAllNotifications(pageNumber) {
        if ( !pageNumber ) {
          noNext = false;
          pageNumber = page;
        }
        notiType = 'all';
        $('#unread').removeClass('btn-primary');
        $('#unread').addClass('btn-default');
        $('#read').removeClass('btn-default');
        $('#read').addClass('btn-primary');
        const query = `
            query {
                listNotificationAlerts(page:${pageNumber}, perPage:${perPage},
                    sortField: UPDATED_AT, sortOrder: DESC
                ){
                    page
                    alerts {
                        id
                        title
                        description
                        isRead
                        createdAt
                    }
                }
            }`;
        $.ajax({
        method: "post",
        url: "/api/graphiql/",
        headers: AUTH_HEADERS_BEARER,
        data: {
            query: query,
            variable: null
        }
        }).then(function (response) {
            if ( !response.errors ) {
                let notiList = '';
                const alerts = response.data.listNotificationAlerts.alerts;
                alerts.forEach(noti => {
                    let active = '<div class="circle active"></div> ';
                    if ( noti.isRead ) active = ''
                    notiList += `
                        <div class="notification" data-id="${noti.id}">
                            ${active}
                            <input type="checkbox" name="mark-noti" value="${noti.id}"/>                        
                            <div class="text-box">
                              <span class="time">${noti.title}</span>
                              <p>${noti.description}</p>
                            </div>
                        </div>
                    `;
                }) 
               
                if ( notiList !== '' ) {
                  notiList = `
                    <div class="select-all">                      
                      <input id="select-all" type="checkbox" onclick="checkAll()" />
                      <label>Select All</label>
                    </div>
                  ` + notiList;
                }
                else {
                  notiList = '<p style="margin-left:25px;">No notifications.</p>';
                }
                $('#noti-list').html(notiList);
                if ( alerts.length < perPage ) {
                  noNext = true;
                }
            }
        }).catch(function (e) {
            console.log('Error  in retrieving notifications.', e);
        })

    }   

    function markNotificationsRead() {
        let query = `
            mutation {
                markAllNotificationAlerts(isRead: true)
            }`;
        const selectAll= $('#select-all').is(":checked");
        if ( !selectAll ) {
          let noti_ids = $.map($('input[name="mark-noti"]:checked'), function(c) { return c.value; });
          if ( noti_ids.length === 0 ) {
            showAlert('Please select notifications', 'danger')
            return;
          }
          noti_ids = '[' + noti_ids.toString() + ']';
          query = ` mutation {
            markNotificationAlerts(alertIds: ${noti_ids}, isRead: true)
          }`;
        } 
        markNotificationAPI(query, 'Read');
    }

    function getPrevNotifications() {
      if ( page == 1 ) return;
      noNext = false;
      page = page - 1;
      if ( notiType === 'unread' ) {
        getUnreadNotifications(page);
        return;
      }
      getAllNotifications(page)
    }

    function getNextNotifications() {
      if ( noNext ) return;
      page = page + 1;
      if ( notiType === 'unread' ) {
        getUnreadNotifications(page);
        return;
      }
      getAllNotifications(page)
    }

    function checkAll(e) {
      const isChecked = $('#select-all').is(":checked");
      $('input[name="mark-noti"]').map((i, el) => {
        $(el).prop('checked', isChecked);
      });
    }
    
    $(document).ready(() => {
      getAllNotifications();
    });
</script>